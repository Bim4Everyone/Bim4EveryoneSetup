name: release

on:
  # on pull_request to master
  pull_request:
    types: [ opened, synchronize ]
    branches: [ main ]
  
  # manual
  workflow_dispatch:
  
  # every month on the first day
  schedule:
    - cron: '0 0 1 * *'

env:
  body_message: |
    üöÄ Bim4Everyone
    ‚¨áÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: [—Å–∫–∞—á–∞—Ç—å](https://github.com/Bim4Everyone/Bim4EveryoneSetup/releases/latest)

jobs:
  build:
    name: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      
      # Install the .NET 8.0 workload
      - name: Install .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      # Install  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Install MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      # Install wix: https://wixtoolset.org/docs/intro/
      - name: Install WIX Tool
        run: dotnet tool install --global wix --version 4.0.6
        
      # Fix wix extensions: https://github.com/oleg-shilo/wixsharp/issues/1473
      - name: Install WIX Extensions
        run: |
          wix extension add -g WixToolset.UI.wixext/4.0.6
          wix extension add -g WixToolset.Util.wixext/4.0.6

      # Build project: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-build
      - name: Build
        run: dotnet build -c Release
        env:
          "BOT_ACCESS_TOKEN":"${{ secrets.BOT_ACCESS_TOKEN }}"
          "AUTOUPDATE":"${{ vars.AUTOUPDATE }}"
          "ROCKETMODE":"${{ vars.ROCKETMODE }}"
          "CHECKUPDATES":"${{ vars.CHECKUPDATES }}"
          "USERCANEXTEND":"${{ vars.USERCANEXTEND }}"
          "USERCANCONFIG":"${{ vars.USERCANCONFIG }}"
          "COREUSERLOCALE":"${{ vars.COREUSERLOCALE }}"
          "CORP_NAME":"${{ vars.CORP_NAME }}"
          "CORP_SETTINGS_PATH":"${{ vars.CORP_SETTINGS_PATH }}"
          "TELEMETRY_ACTIVE":"${{ vars.TELEMETRY_ACTIVE }}"
          "TELEMETRY_SERVER_URL":"${{ vars.TELEMETRY_SERVER_URL }}"
          "APP_TELEMETRY_ACTIVE":"${{ vars.APP_TELEMETRY_ACTIVE }}"
          "APP_TELEMETRY_EVENT_FLAGS":"${{ vars.APP_TELEMETRY_EVENT_FLAGS }}"
          "APP_TELEMETRY_SERVER_URL":"${{ vars.APP_TELEMETRY_SERVER_URL }}"
          "LOG_TRACE_ACTIVE":"${{ vars.LOG_TRACE_ACTIVE }}"
          "LOG_TRACE_LEVEL":"${{ vars.LOG_TRACE_LEVEL }}"
          "LOG_TRACE_SERVER_URL":"${{ vars.LOG_TRACE_SERVER_URL }}"
          "SOCIALS_MAIN":"${{ vars.SOCIALS_MAIN }}"
          "SOCIALS_NEWS":"${{ vars.SOCIALS_NEWS }}"
          "SOCIALS_DISCUSS":"${{ vars.SOCIALS_DISCUSS }}"
          "SOCIALS_2D":"${{ vars.SOCIALS_2D }}"
          "SOCIALS_BIM":"${{ vars.SOCIALS_BIM }}"
          "SOCIALS_AR":"${{ vars.SOCIALS_AR }}"
          "SOCIALS_KR":"${{ vars.SOCIALS_KR }}"
          "SOCIALS_OVVK":"${{ vars.SOCIALS_OVVK }}"
          "SOCIALS_PAGE":"${{ vars.SOCIALS_PAGE }}"
          "SOCIALS_DOWNLOADS":"${{ vars.SOCIALS_DOWNLOADS }}"
          
      # Get msi version
      - name: Get MSI Version
        id: current-date
        uses: juliangruber/read-file-action@v1
        with:
          path: bin/msi_version.txt

      - name: Test Install MSI
        run: |
          Copy-Item "bin\Bim4Everyone_${{ steps.current-date.outputs.content }}.msi" -Destination "C:\Bim4Everyone_${{ steps.current-date.outputs.content }}.msi"
          
          $MSI = Start-Process msiexec.exe `
          -Wait `
          -PassThru `
          -ArgumentList "/i C:\Bim4Everyone_${{ steps.current-date.outputs.content }}.msi /l*v bin/Bim4Everyone_${{ steps.current-date.outputs.content }}.log /q"
          
          $ExitCode = $MSI.ExitCode
          echo "MSI ExitCode: $ExitCode"
          
          exit $ExitCode

      # Upload the test install result: https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload Test Install Result
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-install-result
          path: bin/Bim4Everyone_${{ steps.current-date.outputs.content }}.log
          
      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload MSIX package
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Bim4Everyone
          path: bin/Bim4Everyone_${{ steps.current-date.outputs.content }}.msi
      
      # Get changelog
      - name: Get changelog
        id: changelog
        if: github.ref_name == github.event.repository.default_branch
        uses: juliangruber/read-file-action@v1
        with:
          path: bin/CHANGELOG.md

      # Update git settings
      - name: Update git settings
        if: github.ref_name == github.event.repository.default_branch
        run: |
          git config --global user.name '${{ secrets.GIT_USER_NAME }}'
          git config --global user.email '${{ secrets.GIT_USER_EMAIL }}'
          git remote set-url origin https://${{ secrets.BOT_ACCESS_TOKEN }}@github.com/${{ github.repository }}
      
      # Commit and push changelog
      - name: Commit and push changelog
        if: github.ref_name == github.event.repository.default_branch
        run: |
          git add CHANGELOG.md
          git commit -m "–û–±–Ω–æ–≤–ª–µ–Ω CHANGELOG.md"
          git push
          
      # Publish release: https://github.com/softprops/action-gh-release
      - name: Publish Release
        id: publish-release
        if: github.ref_name == github.event.repository.default_branch
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.current-date.outputs.content }}
          name: Bim4Everyone ${{ steps.current-date.outputs.content }}
          draft: false
          prerelease: false
          files: |
            bin/Bim4Everyone_${{ steps.current-date.outputs.content }}.msi
          body: ${{ steps.changelog.outputs.content }}
  
  telegram:
    if: github.ref_name == github.event.repository.default_branch
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Telegram Notify: https://github.com/appleboy/telegram-action/
      - name: Telegram Notify
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: ${{ env.body_message }}